{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"./../shim\";\n\nvar smartCash = require(\"smartcashjs-lib\");\n\nvar request = require(\"request-promise\");\n\nvar _ = require(\"lodash\");\n\nvar getSapiUrl = require(\"./poolSapi\");\n\nexport function createAndSendRawTransaction(toAddress, amount, keyString) {\n  var key, fromAddress, transaction, sapiUnspent, totalUnspent, fee, change, i, signedTransaction;\n  return _regeneratorRuntime.async(function createAndSendRawTransaction$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          key = smartCash.ECPair.fromWIF(keyString);\n          fromAddress = key.getAddress().toString();\n          transaction = new smartCash.TransactionBuilder();\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(getUnspentWithAmount(fromAddress, amount));\n\n        case 5:\n          sapiUnspent = _context.sent;\n          totalUnspent = _.sumBy(sapiUnspent.utxos, \"amount\");\n          fee = calculateFee(sapiUnspent.utxos);\n          change = totalUnspent - amount - fee;\n\n          if (!(totalUnspent < amount + fee)) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new Error(\"The amount exceeds your balance!\");\n\n        case 11:\n          if (!(amount < 0.001)) {\n            _context.next = 13;\n            break;\n          }\n\n          throw new Error(\"The amount is smaller than the minimum accepted. Minimum amount: 0.001.\");\n\n        case 13:\n          transaction.setLockTime(sapiUnspent.blockHeight);\n          transaction.addOutput(toAddress, parseFloat(smartCash.amount(amount.toString()).toString()));\n\n          if (change >= fee) {\n            transaction.addOutput(fromAddress, parseFloat(smartCash.amount(change.toString()).toString()));\n          } else {\n            fee = change;\n          }\n\n          if (!_.isUndefined(sapiUnspent.utxos) && sapiUnspent.utxos.length > 0) {\n            sapiUnspent.utxos.forEach(function (element) {\n              transaction.addInput(element.txid, element.index);\n            });\n\n            for (i = 0; i < sapiUnspent.utxos.length; i += 1) {\n              transaction.sign(i, key);\n            }\n          }\n\n          _context.prev = 17;\n          signedTransaction = transaction.build().toHex();\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(sendTransaction(signedTransaction));\n\n        case 21:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](17);\n          console.error(_context.t0);\n          throw _context.t0;\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[17, 24]], Promise);\n}\nexport function getAddress(privateKey) {\n  var key = smartCash.ECPair.fromWIF(privateKey);\n  return key.getAddress().toString();\n}\nexport function createNewWalletKeyPair() {\n  var keyPair = smartCash.ECPair.makeRandom();\n  var address = keyPair.getAddress();\n  var key = keyPair.toWIF();\n  return {\n    privateKey: key,\n    address: address\n  };\n}\nexport function getFee(amount, fromAddress) {\n  var sapiUnspent, fee;\n  return _regeneratorRuntime.async(function getFee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getUnspentWithAmount(fromAddress, amount));\n\n        case 2:\n          sapiUnspent = _context2.sent;\n          fee = calculateFee(sapiUnspent.utxos);\n          return _context2.abrupt(\"return\", fee);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getBalance(_address) {\n  return _regeneratorRuntime.async(function getBalance$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(request.get(getSapiUrl() + \"/v1/address/balance/\" + _address, {\n            json: true\n          }));\n\n        case 3:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          throw _context3.t0;\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\nexport function getUnspentWithAmount(_address, _amount) {\n  var utxos, options;\n  return _regeneratorRuntime.async(function getUnspentWithAmount$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          utxos = {};\n          options = {\n            method: \"POST\",\n            uri: getSapiUrl() + \"/v1/address/unspent/amount\",\n            body: {\n              address: _address,\n              amount: _amount,\n              random: true,\n              instantpay: false\n            },\n            json: true\n          };\n          _context4.prev = 2;\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(request.post(options));\n\n        case 5:\n          utxos = _context4.sent;\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](2);\n          utxos = {};\n\n        case 11:\n          return _context4.abrupt(\"return\", utxos);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n}\nexport function getUnspent(_address) {\n  var utxos, options;\n  return _regeneratorRuntime.async(function getUnspent$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          utxos = {};\n          options = {\n            method: \"POST\",\n            uri: getSapiUrl() + \"/v1/address/unspent\",\n            body: {\n              address: _address,\n              pageNumber: 1,\n              pageSize: 10,\n              ascending: false\n            },\n            json: true\n          };\n          _context5.prev = 2;\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(request.post(options));\n\n        case 5:\n          utxos = _context5.sent;\n          _context5.next = 11;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](2);\n          utxos = {};\n\n        case 11:\n          return _context5.abrupt(\"return\", utxos);\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n}\nexport function getTransactionHistory(_address) {\n  return _regeneratorRuntime.async(function getTransactionHistory$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(request.get(\"https://insight.smartcash.cc/api/txs/apps/?address=\" + _address + \"&limit=5\"));\n\n        case 3:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 6:\n          _context6.prev = 6;\n          _context6.t0 = _context6[\"catch\"](0);\n          throw _context6.t0;\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\nexport function sendTransaction(hex) {\n  var options;\n  return _regeneratorRuntime.async(function sendTransaction$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          options = {\n            method: \"POST\",\n            uri: getSapiUrl() + \"/v1/transaction/send\",\n            body: {\n              data: \"\" + hex,\n              instantpay: false,\n              overrideFees: false\n            },\n            json: true\n          };\n          _context7.prev = 1;\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(request.post(options));\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](1);\n          throw _context7.t0;\n\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n}\n\nfunction calculateFee(listUnspent) {\n  var MIN_FEE = 0.001;\n  if (_.isUndefined(listUnspent)) return MIN_FEE;\n  var countUnspent = listUnspent.length;\n  var newFee = 0.001 * (countUnspent * 148 + 2 * 34 + 10 + 9) / 1024;\n  if (newFee > MIN_FEE) MIN_FEE = newFee;\n  return roundUp(MIN_FEE, 5);\n}\n\nfunction roundUp(num, precision) {\n  precision = Math.pow(10, precision);\n  return Math.ceil(num * precision) / precision;\n}","map":{"version":3,"sources":["/Users/enricrypto/git2020/smarthub_local_mobile/lib/sapi.js"],"names":["smartCash","require","request","_","getSapiUrl","createAndSendRawTransaction","toAddress","amount","keyString","key","ECPair","fromWIF","fromAddress","getAddress","toString","transaction","TransactionBuilder","getUnspentWithAmount","sapiUnspent","totalUnspent","sumBy","utxos","fee","calculateFee","change","Error","setLockTime","blockHeight","addOutput","parseFloat","isUndefined","length","forEach","element","addInput","txid","index","i","sign","signedTransaction","build","toHex","sendTransaction","console","error","privateKey","createNewWalletKeyPair","keyPair","makeRandom","address","toWIF","getFee","getBalance","_address","get","json","_amount","options","method","uri","body","random","instantpay","post","getUnspent","pageNumber","pageSize","ascending","getTransactionHistory","hex","data","overrideFees","listUnspent","MIN_FEE","countUnspent","newFee","roundUp","num","precision","Math","pow","ceil"],"mappings":"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","sourcesContent":["\nimport './../shim'\nconst smartCash = require(\"smartcashjs-lib\");\nconst request = require(\"request-promise\");\nconst _ = require(\"lodash\");\nlet getSapiUrl = require(\"./poolSapi\");\n\nexport async function createAndSendRawTransaction(\n  toAddress,\n  amount,\n  keyString\n) {\n  let key = smartCash.ECPair.fromWIF(keyString);\n\n  let fromAddress = key.getAddress().toString();\n\n  let transaction = new smartCash.TransactionBuilder();\n\n  let sapiUnspent = await getUnspentWithAmount(fromAddress, amount);\n\n  let totalUnspent = _.sumBy(sapiUnspent.utxos, \"amount\");\n\n  let fee = calculateFee(sapiUnspent.utxos);\n\n  let change = totalUnspent - amount - fee;\n\n  if (totalUnspent < amount + fee)\n    throw new Error(\"The amount exceeds your balance!\");\n\n  if (amount < 0.001)\n    throw new Error(\n      \"The amount is smaller than the minimum accepted. Minimum amount: 0.001.\"\n    );\n\n  transaction.setLockTime(sapiUnspent.blockHeight);\n\n  //SEND TO\n  transaction.addOutput(\n    toAddress,\n    parseFloat(smartCash.amount(amount.toString()).toString())\n  );\n\n  if (change >= fee) {\n    //Change TO\n    transaction.addOutput(\n      fromAddress,\n      parseFloat(smartCash.amount(change.toString()).toString())\n    );\n  } else {\n    fee = change;\n  }\n\n  //Add unspent and sign them all\n  if (!_.isUndefined(sapiUnspent.utxos) && sapiUnspent.utxos.length > 0) {\n    sapiUnspent.utxos.forEach((element) => {\n      transaction.addInput(element.txid, element.index);\n    });\n\n    for (let i = 0; i < sapiUnspent.utxos.length; i += 1) {\n      transaction.sign(i, key);\n    }\n  }\n\n  try {\n    let signedTransaction = transaction.build().toHex();\n    return await sendTransaction(signedTransaction);\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n}\n\nexport function getAddress(privateKey) {\n  let key = smartCash.ECPair.fromWIF(privateKey);\n\n  return key.getAddress().toString();\n}\n\nexport function createNewWalletKeyPair(){\n    let keyPair = smartCash.ECPair.makeRandom();\n    let address = keyPair.getAddress();\n    let key = keyPair.toWIF();\n    return {\n        privateKey: key,\n        address: address\n    };\n}\n\n/*\n    This method should be public\n    This is used to get the FROM address and the amount\n    After it does call private methods to calculate the fee\n*/\nexport async function getFee(amount, fromAddress) {\n  let sapiUnspent = await getUnspentWithAmount(fromAddress, amount);\n\n  let fee = calculateFee(sapiUnspent.utxos);\n\n  return fee;\n}\n\nexport async function getBalance(_address) {\n  try {\n    return await request.get(`${getSapiUrl()}/v1/address/balance/${_address}`, {\n      json: true,\n    });\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getUnspentWithAmount(_address, _amount) {\n  let utxos = {};\n\n  let options = {\n    method: \"POST\",\n    uri: `${getSapiUrl()}/v1/address/unspent/amount`,\n    body: {\n      address: _address,\n      amount: _amount,\n      random: true,\n      instantpay: false,\n    },\n    json: true,\n  };\n\n  try {\n    utxos = await request.post(options);\n  } catch (err) {\n    utxos = {};\n  }\n  return utxos;\n}\n\nexport async function getUnspent(_address) {\n  let utxos = {};\n\n  let options = {\n    method: \"POST\",\n    uri: `${getSapiUrl()}/v1/address/unspent`,\n    body: {\n      address: _address,\n      pageNumber: 1,\n      pageSize: 10,\n      ascending: false,\n    },\n    json: true,\n  };\n\n  try {\n    utxos = await request.post(options);\n  } catch (err) {\n    utxos = {};\n  }\n  return utxos;\n}\n\nexport async function getTransactionHistory(_address) {\n  try {\n    return await request.get(\n      `https://insight.smartcash.cc/api/txs/apps/?address=${_address}&limit=5`\n    );\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function sendTransaction(hex) {\n  var options = {\n    method: \"POST\",\n    uri: `${getSapiUrl()}/v1/transaction/send`,\n    body: {\n      data: `${hex}`,\n      instantpay: false,\n      overrideFees: false,\n    },\n    json: true, // Automatically stringifies the body to JSON\n  };\n\n  try {\n    return await request.post(options);\n  } catch (err) {\n    throw err;\n  }\n}\n\nfunction calculateFee(listUnspent) {\n  let MIN_FEE = 0.001;\n\n  if (_.isUndefined(listUnspent)) return MIN_FEE;\n\n  let countUnspent = listUnspent.length;\n\n  let newFee = (0.001 * (countUnspent * 148 + 2 * 34 + 10 + 9) / 1024);\n\n  if (newFee > MIN_FEE) MIN_FEE = newFee;\n\n  return roundUp(MIN_FEE, 5);\n}\n\nfunction roundUp(num, precision) {\n  precision = Math.pow(10, precision);\n  return Math.ceil(num * precision) / precision;\n}\n"]},"metadata":{},"sourceType":"module"}